using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using Microsoft.Win32;
using System.Diagnostics;
using System.ComponentModel;
using System.Windows.Threading;
using System.Collections.ObjectModel;
using System.IO;
using System.Xml.Linq;

using PCOMMSERVERLib;

using Gore.DeltaTau;
using Gore.UserAccess;
using Gore.MessageBox;
using Gore.Generic;
using Gore.RecipeManager;
using Gore.MachineManager;
using Gore.MainProcess;
using Gore.FaultHandling;
using Gore.ProcessFlowRFID;
using Gore.Generic.ProcessEx;
using Gore.Generic.Policies;
using Gore.MainProcess.SubProcess;
using Gore.Cognex;
using Gore.ProcessControlBase;

namespace SleeveSewing
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        Recipe Recipe = null;

        bool ExitButtonClicked = false;
        bool RebootPCOnClosing = false;
        private bool _showForLeftSide = false;
        MotionController _motionController;


        ///////////////////////////////////////////////////////////////////////////////////////////
        //          Instance Members 
        //////////////////////////////////////////////////////////////////////////////////////////
        #region Instance Members

        SewingProcess _sewProcess = null;


        #endregion ~Instance Members


        ///////////////////////////////////////////////////////////////////////////////////////////
        //          Construction 
        //////////////////////////////////////////////////////////////////////////////////////////
        #region Construction

        public MainWindow()
        {
            _sewProcess = new SewingProcess();
            InitializeComponent();

        }

        #endregion ~Construction

        ///////////////////////////////////////////////////////////////////////////////////////////
        //          Properties 
        //////////////////////////////////////////////////////////////////////////////////////////
        #region Properties

        public SewingProcess SewProcess
        {
            get { return _sewProcess; }
        }


        #endregion Properties


        /////////////////////////////////////////////////////////////////////
        // MainWindow
        /////////////////////////////////////////////////////////////////////
        public MainWindow(App app)
        {
            try
            {
                // Window.
                app.UpdateSplashScreenStatus("Initializing MainWindow...");
                {
                    _sewProcess = new SewingProcess();
                    InitializeComponent();

                    // Increase the tooltip duration so we can read them (some are long).
                    ToolTipService.ShowDurationProperty.OverrideMetadata(typeof(DependencyObject), new FrameworkPropertyMetadata(60000));

                    // For some reason this speeds up the UI.  We are setting ItemsSource directly rather than binding to it in xaml.
                    MachineStatus_ListBox.ItemsSource = Globals.Messages;

                    // Setup the Messages List Box FIRST so it's ready for status messages.  Must happen when the list box is a window.
                    Globals.Messages.SetBindingListBox(MachineStatus_ListBox);


                }

                // Machine Parameters.
                app.UpdateSplashScreenStatus("Initializing Settings...");
                MachineManager.ParametersLoadedEvent += new MachineManager.ParametersLoadedEventHandler(OnParametersLoaded);
                MachineManager.ParametersUnlockedEvent += new MachineManager.ParametersUnlockedEventHandler(ParametersUnlocked);
                MachineManager.Initialize(Globals.MachineParameters, MachineParameters_Grid);

                // Recipe.
                app.UpdateSplashScreenStatus("Initializing Recipes...");
                RecipeManager.RecipeSelectionChangedEvent += new RecipeManager.RecipeSelectionChangedEventHandler(OnRecipeSelectionChanged);
                RecipeManager.Initialize(new Recipe(), Recipe_Grid);

                // load runtime
                Globals.MainWindowViewModel.KeyValueObjectsViewModel.LoadItem();

                // Alarms.
                app.UpdateSplashScreenStatus("Initializing Alarms...");
                FaultHandling.FaultActiveChangedEvent += new FaultHandling.FaultActiveChangedEventHandler(OnFaultActiveChanged);
                FaultHandling.AlarmMonitoringStartedEvent += new FaultHandling.AlarmMonitoringStartedEventHandler(OnAlarmMonitoringStarted);
                FaultHandling.InitializeFaults();
                FaultHandling.InitializeWarnings();
                SetupAlarms();

                // Process.
                app.UpdateSplashScreenStatus("Initializing Process...");
                MainProcess.Initialize(false, false, true, true, true, false);
                ProcessFlowRFID.Initialize();
                Globals.ProcessControl.Initialize(true, true, true, true, true);

                // Subprocess.
                //Globals.StockPumpSubProcess.Initialize(false, true);
                //Globals.LoadFilmSubProcess.Initialize(false, true);
                //SubProcess_SubProcess_UserControl.Initialize(Globals.LoadFilmSubProcess, Globals.StockPumpSubProcess);

                // Users.
                UserAccess.Initialize(true, false, false, false);

                // DeltaTau.
                app.UpdateSplashScreenStatus("Initializing Motion Controller...");
                //Gore.DeltaTau.DeltaTau.Initialize();
                //SetupMotors();
                SetupIO();

                // Barcode Reader.
                CognexDataMan.Initialize();

                // Data context.
                app.UpdateSplashScreenStatus("Initializing DataContext...");
                DataContext = new
                {
                    MachineManagerBindings = MachineManager.Bindings,
                    MainWindowViewModel = Globals.MainWindowViewModel,
                    ProcessControl = Globals.ProcessControl,
                    CurrentUser = UserAccess.CurrentUser,
                    Status = MainProcess.Status,
                    RecipeManagerVars = RecipeManager.Variables,
                    Alarms = FaultHandling.Globals,
                    RFID_Controller_Simulation = Gore.ProcessFlowRFID.ProcessFlowRFID.Simulation.RFID_Controller,
                    OverrideBackgroundColor_Simulation = Gore.Simulation.Simulation.OverrideBackgroundColor,
                    BadgeAccessLevels_Simulation = Gore.Simulation.Simulation.BadgeAccessLevels,
                };
            }
            catch (Exception ex)
            {
                MessageBoxEx.ShowError(ex, "Failed to initialize the Main Window.\n\nThe application cannot continue and will shutdown.");
                try
                {
                    FinalShutdown(false);
                }
                catch (Exception ex2)
                {
                    MessageBoxEx.ShowError(ex2, "Shutdown Failed.");
                }
            }
        }


        /////////////////////////////////////////////////////////////////////
        // RootWindow_Loaded
        /////////////////////////////////////////////////////////////////////
        private void RootWindow_Loaded(object sender, RoutedEventArgs e)
        {
            try
            {
                // Not sure why design mode runs this loaded event, but it does.  Kill it!
                if (System.ComponentModel.DesignerProperties.GetIsInDesignMode(new DependencyObject()))
                {
                    return;
                }

                Gore.Simulation.Simulation.PromptToSetSimulationFlags(true);

                UserAccess.LogIn();
            }
            catch (Exception ex)
            {
                String ErrMsg =
                                "Failed to initialize the system!" +
                                "\n\nThis is a serious Error!  DO NOT ATTEMPT TO RUN THE MACHINE." +
                                "\n\nPlease contact Maintenance or Engineering to fix the issue and verify the controller is functioning properly."
                                ;

                MessageBoxEx.ShowError(ex, ErrMsg);
            }
        }


        /////////////////////////////////////////////////////////////////////
        // Window_Closing
        /////////////////////////////////////////////////////////////////////
        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = !ExitButtonClicked;
        }


        /////////////////////////////////////////////////////////////////////
        // OnFaultActiveChanged
        /////////////////////////////////////////////////////////////////////
        void OnFaultActiveChanged(Fault Fault)
        {
            // Is this the Main Power Error?
            if (Fault.IsMainPowerFault)
            {
                if (Fault.State)
                {
                    // Close any safety circuit initializing prompt.
                    //SafetyCircuitInitializingPrompt.ClosePrompt = true;
                }
                else
                {
                    // Prompt the user with a window that waits for the safety circuit to initialize.  This is a MODELESS dialog so control returns immediately (asynchronously).
                    //SafetyCircuitInitializingPrompt.Reset();
                    MessageBoxEx.ShowCancel(
                        "Waiting for Safety Circuit to Initialize after machine power on.",
                        "Safety Circuit Initializing",
                       null,
                        null,
                        true,
                        true
                        );
                }
            }
        }


        /////////////////////////////////////////////////////////////////////
        // OnAlarmMonitoringStarted
        /////////////////////////////////////////////////////////////////////
        void OnAlarmMonitoringStarted(ref bool Abort)
        {
            

            try
            {
                // Poll Delta Tau for alarms and warnings.
                while (!Abort)
                {
                   
                    
                    // Alarms.
                    //FaultHandling.Globals.FaultsActive = 

                    // Warnings.
                    //FaultHandling.Globals.WarningsActive = Globals.MotionController.GetPVariable64_E(PVars.CurrentWarnings);

                    // Don't hog the processor.
                    System.Threading.Thread.Sleep(250);
                }
            }
            catch (Exception ex)
            {
                // Unable to get alarm status.
                FaultHandling.Globals.ShowAlarmStatusFailureMessage(ex);
            }
        }

        /////////////////////////////////////////////////////////////////////
        // ParametersUnlocked
        /////////////////////////////////////////////////////////////////////
        void ParametersUnlocked()
        {
            MainProcess.Status.ProcessStatus = "";
            MainProcess.Status.MachineReset = false;

            Globals.ProcessControl.SgmsRfid.Disconnect();
        }

        /////////////////////////////////////////////////////////////////////
        // OnParametersLoaded
        /////////////////////////////////////////////////////////////////////
        void OnParametersLoaded(MachineParameterBase MachineParametersBase)
        {
            Globals.MachineParameters = MachineParametersBase as MachineParameters;
        }


        /////////////////////////////////////////////////////////////////////
        // OnRecipeSelectionChanged
        /////////////////////////////////////////////////////////////////////
        void OnRecipeSelectionChanged(RecipeBase RecipeObject)
        {
            Recipe = RecipeObject as Recipe;

            // Give Process Control knowledge.
            Globals.ProcessControl.Recipe = Recipe;



            if (MainProcess.Status.MachineReset)
            {
                //if selected internally and not null, show combobox
                Globals.MainWindowViewModel.ShowRecipeComboBox = !Globals.ProcessControl.SgmsRfid.IsConnected ||
                    (Globals.ProcessControl.Recipe != null &&
                    Globals.ProcessControl.SgmsRfid.IsConnected &&
                    Globals.ProcessControl.SgmsRfid.Channels.Where(n => n.TagInRange).Count() == 0);
            }
        }


        /////////////////////////////////////////////////////////////////////
        // SetupAlarms
        /////////////////////////////////////////////////////////////////////
        void SetupAlarms()
        {
            // Faults.
            {
                FaultHandling.Globals.AddFault(new Fault(
                    "Main Power Off",
                    "Main\nPower\nOff",
                    "The safety circuit needs resetting before turning the main power on.  Please follow the instructions below to reset the safety circuit." +
                    "\n\n\t1) Press the E-Stop button" +
                    "\n\t2) Release the E-Stop button" +
                    "\n\t3) Press the Power On button",
                    IsMainPowerFault: true
                    ));
                FaultHandling.Globals.AddFault(new Fault("Main Air Off", "Main\nAir\nOff"));
            }

            // Warnings
            {
                FaultHandling.Globals.AddWarning(new Warning("X Axis Speed Fault", "Warning"));
                FaultHandling.Globals.AddWarning(new Warning("Y Axis Speed Fault", "Warning"));
                FaultHandling.Globals.AddWarning(new Warning("Z Axis Speed Fault", "Warning"));
                FaultHandling.Globals.AddWarning(new Warning("Spindle Axis Speed Fault", "Warning"));
                FaultHandling.Globals.AddWarning(new Warning("UPS Alarm", "Warning", ShowPopup: true));
            }
        }


        /////////////////////////////////////////////////////////////////////
        // SetupIO
        /////////////////////////////////////////////////////////////////////
        void SetupIO()
        {
            // Outputs
            DigitalOutputs_UserControl.Initialize(Gore.IO.IOTypes.DO, 500, true,
                DO.RightThreadClamp,
                DO.LeftThreadClamp,
                DO.LeftSleeveClamp,
                DO.RightSleeveClamp,
                DO.NeedleBlock,
                DO.TailStockAdjust,
                DO.SleeveTension

                );

            // Inputs
            DigitalInputs_UserControl.Initialize(Gore.IO.IOTypes.DI, 500, true,
                DI.MachineEstopped

                );

            // Analog Inputs
            
            AnaglogInputs_UserControl.Initialize(Gore.IO.IOTypes.AI, 500, true,
                AI.SleeveTension,
                AI.RightThreadBrake,
                AI.LeftThreadBrake
                );
                
        }


        /////////////////////////////////////////////////////////////////////
        // File_Exit
        /////////////////////////////////////////////////////////////////////
        private void File_Exit(object sender, RoutedEventArgs e)
        {
            FinalShutdown(false);
        }


        /////////////////////////////////////////////////////////////////////
        // FinalShutdown
        /////////////////////////////////////////////////////////////////////
        private void FinalShutdown(bool RebootPC)
        {
            Globals.ProcessControl.SgmsRfid.Disconnect();

            // PRE: Cycle Threads already shutdown, Binding wouldn't allow us to get here otherwise.

            // Safe flag so our newly added closing event can see it.
            RebootPCOnClosing = RebootPC;

            // Register a closing event (should be the last in the chain to get called back) so that we can do shutdown stuff after the Recipe Manager and Machine Paramters have prompted the user.
            this.Closing -= new System.ComponentModel.CancelEventHandler(FinalShutdown_Closing);
            this.Closing += new System.ComponentModel.CancelEventHandler(FinalShutdown_Closing);

            // Close the application.  This should fire the RM and MP closing events along with our newly registered closing event.  We moved all our shutdown code to our closing event.
            ExitButtonClicked = true;
            this.Close();
        }


        /////////////////////////////////////////////////////////////////////
        // FinalShutdown_Closing
        /////////////////////////////////////////////////////////////////////
        private void FinalShutdown_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            // Are we closing?  Recipe Manager and/or Machine Parameters may be cancelling the close due to the user cancelling changes.
            if (e.Cancel == false)
            {
                // Force a logout.  This is a nice way to cleanup any user controls on tabs other than the main tab because they should all get the unloaded event.
                UserAccess.LogOut();

                // Stop the Alarm Monitoring Thread.
                FaultHandling.Globals.StopAlarmMonitoring();

                // Disconnect Delta Tau.
                Globals.MotionController.Disconnect();

                // Shutdown DataMan Reader.
                Globals.DataManReader.Disconnect();

                // Remove Callbacks.
                RemoveCallbacks();

                // Shutdown RFID.
                ProcessFlowRFID.Disconnect();

                if (RebootPCOnClosing)
                {
                    ProcessEx.RebootPC();
                }
            }
        }


        /////////////////////////////////////////////////////////////////////
        // RemoveCallbacks
        /////////////////////////////////////////////////////////////////////
        void RemoveCallbacks()
        {
            try
            {
                MachineManager.ParametersLoadedEvent -= new MachineManager.ParametersLoadedEventHandler(OnParametersLoaded);
                MachineManager.ParametersUnlockedEvent -= new MachineManager.ParametersUnlockedEventHandler(ParametersUnlocked);
                RecipeManager.RecipeSelectionChangedEvent -= new RecipeManager.RecipeSelectionChangedEventHandler(OnRecipeSelectionChanged);
                FaultHandling.FaultActiveChangedEvent -= new FaultHandling.FaultActiveChangedEventHandler(OnFaultActiveChanged);
                FaultHandling.AlarmMonitoringStartedEvent -= new FaultHandling.AlarmMonitoringStartedEventHandler(OnAlarmMonitoringStarted);
            }
            catch { }
        }


        /////////////////////////////////////////////////////////////////////
        // Security_LogIn
        /////////////////////////////////////////////////////////////////////
        private void Security_LogIn(object sender, RoutedEventArgs e)
        {
            LoginResult Result = UserAccess.LogIn();
            if (Result == LoginResult.UserDoesNotExist)
            {
                MessageBoxEx.Show(
                    "The scanned Badge ID does not exist in the system, please ask an associate with higher access level to add you to the system.",
                    "Warning",
                    MessageBoxButton.OK,
                    MessageBoxImage.Warning
                    );
            }
        }


        /////////////////////////////////////////////////////////////////////
        // Security_LogOut
        /////////////////////////////////////////////////////////////////////
        private void Security_LogOut(object sender, RoutedEventArgs e)
        {
            UserAccess.LogOut();
        }


        /////////////////////////////////////////////////////////////////////
        // Security_EditUser
        /////////////////////////////////////////////////////////////////////
        private void Security_EditUser(object sender, RoutedEventArgs e)
        {
            UserAccess.ShowEditUsersDialog();
        }


        /////////////////////////////////////////////////////////////////////
        // Simulation_Click
        /////////////////////////////////////////////////////////////////////
        private void Simulation_Click(object sender, RoutedEventArgs e)
        {
            Gore.Simulation.Simulation.PromptToSetSimulationFlags(false, !MainProcess.Status.MachineReset);
        }


        /////////////////////////////////////////////////////////////////////
        // Help_About
        /////////////////////////////////////////////////////////////////////
        private void Help_About(object sender, RoutedEventArgs e)
        {
            String DeltaTauVars = "ERROR";
            String DeltaTauMain = "ERROR";
            try
            {
                if (Gore.DeltaTau.DeltaTau.Simulation)
                {
                    DeltaTauVars = "-1.03";
                    DeltaTauMain = "-1.04";
                }
                else
                {
                    // DeltaTauVars = Globals.DeltaTau.GetPVariableDouble_E(PVars.DeltaTauVars_Version).ToString();
                    //DeltaTauMain = Globals.DeltaTau.GetPVariableDouble_E(PVars.DeltaTauMain_Version).ToString();
                }
            }
            catch (Exception ex)
            {
                MessageBoxEx.ShowError(ex, "Failed to get the Delta Tau versions.");
            }

            ObservableCollection<GoreVersion> Versions = new ObservableCollection<GoreVersion>();
            Versions.Add(new GoreVersion("Software Title:", App.SOFTWARE_TITLE));
            Versions.Add(new GoreVersion("Software MD:", App.SOFTWARE_MD));
            Versions.Add(new GoreVersion("Software Version:", App.SOFTWARE_VERSION));
            Versions.Add(new GoreVersion("Machine Name:", App.MACHINE_NAME));
            Versions.Add(new GoreVersion("Production Recipes:", RecipeManager.GetProductionFileNotes()));
#warning where did the Machine Manager version go?
            //            Versions.Add(new GoreVersion("Machine Parameters:", MachineManager.GetProductionVersionNumber()));
            Versions.Add(new GoreVersion("Delta Tau Vars:", DeltaTauVars));
            Versions.Add(new GoreVersion("Delta Tau Main:", DeltaTauMain));

            SoftwareVersion.ShowVersionsDialog(Versions, this);
        }


        /////////////////////////////////////////////////////////////////////
        // Home_Button_Click
        /////////////////////////////////////////////////////////////////////
        private void Home_Button_Click(object sender, RoutedEventArgs e)
        {
            MainProcess.StartHome();
            bool res = MotionController.Instance.DoHome();
            if (res == false)
            {
                string msg = "";
                try
                {
                    msg = "Failed to Start the Home Process.";
                }



                catch (Exception ex)
                {
                    MessageBoxEx.ShowError(ex, msg);

                }
            }
        }


        /////////////////////////////////////////////////////////////////////
        // CancelHome_Button_Click
        /////////////////////////////////////////////////////////////////////
        private void CancelHome_Button_Click(object sender, RoutedEventArgs e)
        {
            MainProcess.AbortProcess();
        }


        void Double_ValidationRule(object value, out ValidationResult ValidationResult)
        {
            try
            {
                double DoubleValue = System.Convert.ToDouble(value);
                double Min = double.Epsilon;
                double Max = 10.0;
                if ((DoubleValue < Min) || (DoubleValue > Max))
                {
                    ValidationResult = new ValidationResult(false, "Please enter a value in the range: " + Min.ToString() + " - " + Max.ToString() + ".");
                }
            }
            catch (Exception ex)
            {
                // Should never happen because there should be a double validation rule on the EditDouble text box.
                ValidationResult = new ValidationResult(false, ex.Message);
                return;
            }

            ValidationResult = new ValidationResult(true, null); //default is that it is fine 
        }

    }
    
}

